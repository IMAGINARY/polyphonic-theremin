{"mappings":"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","sources":["src/lib/ts/index.ts","index.ts","src/lib/ts/polyphonic-theremin.ts","polyphonic-theremin.ts","src/lib/scss/polyphonic-theremin.module.scss","src/lib/ts/tones.ts","tones.ts","src/lib/ts/util.ts","util.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"declarations.d.ts\"/>\nimport PolyphonicTheremin from './polyphonic-theremin';\nimport type {\n  // Workaround because TypeScript currently can't re-export types via \"export * from '...'\"\n  PolyphonicThereminOptions as IPolyphonicThereminOptions,\n  ToneOptions as IToneOptions,\n} from './polyphonic-theremin';\n\nexport * from './polyphonic-theremin';\nexport default PolyphonicTheremin;\n\nexport type PolyphonicThereminOptions = IPolyphonicThereminOptions;\nexport type ToneOptions = IToneOptions;\n",null,"import classes from '../scss/polyphonic-theremin.module.scss';\nimport Tones, {\n  ToneOptions as IToneOptions,\n  defaultOptions as defaultToneOptions,\n} from './tones';\nimport { getRelativePointerPosition, setPosition } from './util';\n\nexport type ToneOptions = IToneOptions;\nexport type PolyphonicThereminOptions = {\n  touchElementCssClasses: string[];\n  touchElementStyle: string;\n};\n\nconst defaultOptions: Readonly<PolyphonicThereminOptions> = {\n  touchElementCssClasses: [classes.ring],\n  touchElementStyle: '',\n};\n\nfunction queryForPointerIdAll<T extends Element>(\n  parent: Element,\n  id: number,\n): NodeListOf<T> {\n  return parent.querySelectorAll<T>(\n    `.${classes.pointer}[data-pointer-id=\"${id}\"]`,\n  );\n}\n\nexport default class PolyphonicTheremin {\n  protected readonly _options: PolyphonicThereminOptions;\n\n  protected tones: Tones;\n\n  protected handlers = this.getHandlers();\n\n  protected element: Element;\n\n  protected pane: HTMLDivElement;\n\n  constructor(\n    element: Element,\n    options: Partial<PolyphonicThereminOptions> = {},\n    toneOptions: Partial<ToneOptions> = {},\n  ) {\n    this._options = { ...defaultOptions, ...options };\n\n    const pane = document.createElement('div');\n    pane.setAttribute('touch-action', 'none'); // for Pointer Events Polyfill\n    pane.classList.add(classes.pane);\n    pane.addEventListener('pointerdown', this.handlers.addPointer);\n    pane.addEventListener('pointerup', this.handlers.removePointer);\n    pane.addEventListener('pointercancel', this.handlers.removePointer);\n    pane.addEventListener('contextmenu', (event) => event.preventDefault());\n\n    while (element.firstChild) element.firstChild.remove();\n    element.appendChild(pane);\n\n    this.pane = pane;\n    this.element = element;\n\n    this.tones = new Tones(toneOptions);\n  }\n\n  getOptions() {\n    return { ...this._options };\n  }\n\n  applyOptions(o: Partial<PolyphonicThereminOptions>) {\n    Object.assign(this._options, o);\n    this.refreshPointerElementCssAll();\n  }\n\n  getToneOptions(): ToneOptions {\n    return this.tones.getOptions();\n  }\n\n  applyToneOptions(o: Partial<ToneOptions>) {\n    this.tones.applyOptions(o);\n  }\n\n  protected getHandlers() {\n    return {\n      addPointer: this.addPointer.bind(this),\n      updatePointer: this.updatePointer.bind(this),\n      removePointer: this.removePointer.bind(this),\n    };\n  }\n\n  protected addPointer(pe: PointerEvent) {\n    this.removePointer(pe);\n    this.pane.addEventListener('pointermove', this.handlers.updatePointer);\n\n    this.pane.setPointerCapture(pe.pointerId);\n\n    const { relX, relY } = getRelativePointerPosition(pe, this.pane);\n\n    const internalElem = document.createElement('div');\n    internalElem.setAttribute('touch-action', 'none'); // for Pointer Events Polyfill\n    this.refreshPointerElementCss(internalElem);\n\n    const elem = document.createElement('div');\n    elem.setAttribute('touch-action', 'none'); // for Pointer Events Polyfill\n    elem.classList.add(classes.pointer);\n    elem.dataset.pointerId = `${pe.pointerId}`;\n    elem.appendChild(internalElem);\n\n    this.pane.append(elem);\n\n    this.tones.add(pe.pointerId, relX, relY);\n\n    this.updatePointer(pe);\n  }\n\n  protected updatePointer(pe: PointerEvent) {\n    if (pe.buttons === 0) return;\n\n    const id = pe.pointerId;\n    const elems = queryForPointerIdAll<HTMLElement>(this.pane, id);\n    const { x, y, relX, relY } = getRelativePointerPosition(pe, this.pane);\n    elems.forEach((e) => setPosition(e, x, y));\n    this.tones.update(id, relX, relY);\n  }\n\n  protected removePointer(pe: PointerEvent) {\n    const id = pe.pointerId;\n    const elems = queryForPointerIdAll<HTMLElement>(this.pane, id);\n    elems.forEach((e) => e.remove());\n    this.pane.releasePointerCapture(pe.pointerId);\n\n    this.tones.remove(id);\n\n    if (this.tones.size === 0)\n      this.pane.removeEventListener('pointermove', this.handlers.updatePointer);\n  }\n\n  protected refreshPointerElementCss(element: Element) {\n    const { touchElementCssClasses, touchElementStyle } = this._options;\n    element.classList.add(...touchElementCssClasses);\n    element.setAttribute('style', touchElementStyle);\n  }\n\n  protected refreshPointerElementCssAll() {\n    const elements = this.pane.querySelectorAll(`.${classes.pointer} > *`);\n    elements.forEach(this.refreshPointerElementCss.bind(this));\n  }\n}\n\nexport { defaultOptions, defaultToneOptions };\n",null,".pane {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: visible;\n  touch-action: none;\n  box-sizing: border-box;\n}\n\n.pane * {\n  touch-action: none;\n}\n\n.pointer {\n  position: absolute;\n}\n\n.pointer > .ring {\n  margin: 0;\n  position: absolute;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  border: 4px solid lightgray;\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n}\n","import {\n  interpolateLinear,\n  interpolateLogarithmic,\n  AudioContext,\n  cancelAndHoldNow,\n} from './util';\n\nexport interface ToneData {\n  tGain: number;\n  tFrequency: number;\n}\n\ninterface ToneDataWithNodes extends ToneData {\n  envelopeGainNode: GainNode;\n  gainNode: GainNode;\n  oscillatorNode: OscillatorNode;\n}\n\nfunction extractToneData<T extends ToneData>(toneDataExt: T): ToneData {\n  const { tGain, tFrequency } = toneDataExt;\n  return {\n    tGain,\n    tFrequency,\n  };\n}\n\ntype ToneOptions = {\n  waveType: OscillatorType;\n  gainMin: number;\n  gainMax: number;\n  frequencyMinHz: number;\n  frequencyMaxHz: number;\n  attackMs: number;\n  releaseMs: number;\n  updateMs: number;\n  mute: boolean;\n};\n\nconst defaultOptions: Readonly<ToneOptions> = {\n  waveType: 'square',\n  gainMin: 0.01,\n  gainMax: 0.3,\n  frequencyMinHz: 65,\n  frequencyMaxHz: 3000,\n  attackMs: 10,\n  releaseMs: 200,\n  updateMs: 10,\n  mute: false,\n};\n\nclass Tones {\n  protected readonly _options: ToneOptions;\n\n  protected toneObjects: Map<number, ToneDataWithNodes>;\n\n  protected releasingToneObjects: Set<ToneDataWithNodes>;\n\n  protected audioContext: AudioContext;\n\n  protected globalGain: GainNode;\n\n  constructor(options: Partial<ToneOptions> = {}) {\n    this._options = { ...defaultOptions, ...options };\n    this.toneObjects = new Map();\n    this.releasingToneObjects = new Set();\n    this.audioContext = new AudioContext();\n    this.globalGain = this.audioContext.createGain();\n    this.globalGain.gain.value = 0.0;\n    this.globalGain.connect(this.audioContext.destination);\n    this.applyMute();\n  }\n\n  getOptions(): ToneOptions {\n    return { ...this._options };\n  }\n\n  applyOptions(o: Partial<ToneOptions>) {\n    Object.assign(this._options, o);\n    // TODO: Optimize by updating only what actually changed.\n    this.applyMute();\n    this.refresh();\n  }\n\n  getToneData(): Map<number, ToneData> {\n    const convertEntries = ([id, t]: [id: number, t: ToneDataWithNodes]): [\n      number,\n      ToneData,\n    ] => [id, extractToneData(t)];\n    const entriesExt = [...this.toneObjects.entries()];\n    const entries = entriesExt.map(convertEntries);\n    return new Map(entries);\n  }\n\n  get size() {\n    return this.toneObjects.size;\n  }\n\n  createTone() {\n    // create envelope Gain node\n    const envelopeGainNode = this.audioContext.createGain();\n    envelopeGainNode.gain.value = 0;\n    envelopeGainNode.connect(this.globalGain);\n\n    // create Gain node\n    const gainNode = this.audioContext.createGain();\n    gainNode.connect(envelopeGainNode);\n\n    // create variable-frequency Oscillator node\n    const { waveType } = this._options;\n    const oscillatorNode = this.audioContext.createOscillator();\n    oscillatorNode.type = waveType;\n    oscillatorNode.connect(gainNode);\n    oscillatorNode.start();\n\n    return {\n      envelopeGainNode,\n      gainNode,\n      oscillatorNode,\n    };\n  }\n\n  getToneParams(tGain: number, tFrequency: number) {\n    const { gainMin, gainMax } = this._options;\n    const gain = interpolateLinear(tGain, gainMin, gainMax);\n    const { frequencyMinHz, frequencyMaxHz } = this._options;\n    const frequency = interpolateLogarithmic(\n      tFrequency,\n      frequencyMinHz,\n      frequencyMaxHz,\n    );\n    return { gain, frequency };\n  }\n\n  add(id: number, tGain: number, tFrequency: number): ToneData {\n    const tone = this.createTone();\n    const { envelopeGainNode, gainNode, oscillatorNode } = tone;\n    const { gain, frequency } = this.getToneParams(tGain, tFrequency);\n    const { attackMs } = this._options;\n    const attackTimestamp = this.audioContext.currentTime + attackMs / 1000;\n    envelopeGainNode.gain.linearRampToValueAtTime(1.0, attackTimestamp);\n    gainNode.gain.value = gain;\n    oscillatorNode.frequency.value = frequency;\n\n    this.remove(id);\n\n    const toneData = { ...tone, tGain, tFrequency };\n    this.toneObjects.set(id, toneData);\n\n    return toneData;\n  }\n\n  update(id: number, tGain: number, tFrequency: number) {\n    this.audioContext.resume().catch(() => {});\n\n    const toneDataWithNodes = this.toneObjects.get(id);\n    if (!toneDataWithNodes) return;\n\n    toneDataWithNodes.tGain = tGain;\n    toneDataWithNodes.tFrequency = tFrequency;\n    this.refreshNodes(toneDataWithNodes);\n  }\n\n  protected refreshNodes(toneDataWithNodes: ToneDataWithNodes) {\n    const { tGain, tFrequency } = toneDataWithNodes;\n    const { gain, frequency } = this.getToneParams(tGain, tFrequency);\n    const { gainNode, oscillatorNode } = toneDataWithNodes;\n    const { updateMs } = this._options;\n    const { currentTime } = this.audioContext;\n    const updateDoneTimestamp = currentTime + updateMs / 1000.0;\n    const gainParam = gainNode.gain;\n    const frequencyParam = oscillatorNode.frequency;\n    cancelAndHoldNow(gainParam, this.audioContext);\n    cancelAndHoldNow(frequencyParam, this.audioContext);\n    gainParam.linearRampToValueAtTime(gain, updateDoneTimestamp);\n\n    // Use exponential ramp if available and linear ramp otherwise.\n    const frequencyRamp =\n      frequencyParam.exponentialRampToValueAtTime.bind(frequencyParam) ??\n      frequencyParam.linearRampToValueAtTime.bind(frequencyParam);\n    frequencyRamp(frequency, updateDoneTimestamp);\n  }\n\n  remove(id: number) {\n    const toneData = this.toneObjects.get(id);\n    if (!toneData) return;\n\n    const { envelopeGainNode, gainNode, oscillatorNode } = toneData;\n    const { releaseMs } = this._options;\n    const decayTimestamp = this.audioContext.currentTime + releaseMs / 1000;\n    envelopeGainNode.gain.linearRampToValueAtTime(0.0, decayTimestamp);\n    setTimeout(() => {\n      envelopeGainNode.disconnect();\n      gainNode.disconnect();\n      oscillatorNode.stop();\n      oscillatorNode.disconnect();\n      this.releasingToneObjects.delete(toneData);\n\n      const tonesLeftPlaying =\n        this.toneObjects.size + this.releasingToneObjects.size;\n      if (tonesLeftPlaying === 0) this.audioContext.suspend().catch(() => {});\n    }, releaseMs);\n\n    this.toneObjects.delete(id);\n    this.releasingToneObjects.add(toneData);\n  }\n\n  refresh() {\n    [...this.toneObjects.values()].forEach((t) => this.refreshNodes(t));\n  }\n\n  protected applyMute() {\n    const { currentTime } = this.audioContext;\n    const { gain } = this.globalGain;\n    const updateDoneTimestamp = currentTime + 0.02;\n    const targetGain = this._options.mute ? 0.0 : 1.0;\n    cancelAndHoldNow(gain, this.audioContext);\n    gain.linearRampToValueAtTime(targetGain, updateDoneTimestamp);\n  }\n}\n\nexport { ToneOptions, defaultOptions };\nexport default Tones;\n",null,"function interpolateLinear(t: number, min: number, max: number) {\n  return min + (max - min) * t;\n}\n\nfunction interpolateLogarithmic(t: number, min: number, max: number) {\n  // The base of the logarithm cancels out during the computation,\n  // so we will just use any base, e.g. Euler's number.\n  const logMin = Math.log(min);\n  const logMax = Math.log(max);\n  const logValue = logMin + (logMax - logMin) * t;\n  return Math.exp(logValue);\n}\n\nfunction getRelativePointerPosition(pe: PointerEvent, elem: HTMLElement) {\n  const { left, top, width, height } = elem.getBoundingClientRect();\n  const x = Math.max(0, Math.min(pe.clientX - left, width));\n  const y = Math.max(0, Math.min(pe.clientY - top, height));\n  const relX = x / width;\n  const relY = y / height;\n  return { x, y, relX, relY, width, height };\n}\n\nfunction setPosition(element: HTMLElement, x: number, y: number) {\n  const { style } = element;\n  style.transform = `translate(${x}px, ${y}px)`;\n}\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\n\n/**\n * This is a workaround for some browsers not supporting\n * AudioParam.cancelAndHoldAtTime().\n */\nfunction cancelAndHoldNow(audioParam: AudioParam, audioContext: AudioContext) {\n  const { currentTime } = audioContext;\n  const { value } = audioParam;\n  audioParam.cancelScheduledValues(currentTime);\n  // eslint-disable-next-line no-param-reassign\n  audioParam.value = value;\n}\n\nexport {\n  interpolateLinear,\n  interpolateLogarithmic,\n  getRelativePointerPosition,\n  setPosition,\n  AudioContext,\n  cancelAndHoldNow,\n};\n",null],"names":[],"version":3,"file":"index.mjs.map"}