{"mappings":"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","sources":["src/lib/ts/index.ts","index.ts","src/lib/ts/polyphonic-theremin.ts","polyphonic-theremin.ts","src/lib/ts/tones.ts","tones.ts","src/lib/ts/util.ts","util.ts"],"sourcesContent":["import PolyphonicTheremin from './polyphonic-theremin';\n\nexport default PolyphonicTheremin;\n",null,"import classes from '../scss/polyphonic-theremin.module.scss';\nimport Tones, { ToneOptions } from './tones';\nimport { getRelativePointerPosition, setPosition } from './util';\n\ntype PolyphonicThereminOptions = ToneOptions;\n\nfunction queryForPointerIdAll<T extends Element>(\n  parent: Element,\n  id: number,\n): NodeListOf<T> {\n  return parent.querySelectorAll<T>(\n    `.${classes.pointer}[data-pointer-id=\"${id}\"]`,\n  );\n}\n\nexport default class PolyphonicTheremin {\n  protected tones: Tones;\n\n  protected handlers = this.getHandlers();\n\n  protected element: Element;\n\n  protected pane: HTMLDivElement;\n\n  constructor(\n    element: Element,\n    options: Partial<PolyphonicThereminOptions> = {},\n  ) {\n    const pane = document.createElement('div');\n    pane.classList.add(classes.pane);\n    pane.addEventListener('pointerdown', this.handlers.addPointer);\n    pane.addEventListener('pointerup', this.handlers.removePointer);\n    pane.addEventListener('pointercancel', this.handlers.removePointer);\n    pane.addEventListener('contextmenu', (event) => event.preventDefault());\n\n    while (element.firstChild) element.firstChild.remove();\n    element.appendChild(pane);\n\n    this.pane = pane;\n    this.element = element;\n\n    this.tones = new Tones(options);\n  }\n\n  get options() {\n    return this.tones.options;\n  }\n\n  protected getHandlers() {\n    return {\n      addPointer: this.addPointer.bind(this),\n      updatePointer: this.updatePointer.bind(this),\n      removePointer: this.removePointer.bind(this),\n    };\n  }\n\n  addPointer(pe: PointerEvent) {\n    this.removePointer(pe);\n    this.pane.addEventListener('pointermove', this.handlers.updatePointer);\n\n    this.pane.setPointerCapture(pe.pointerId);\n\n    const { relX, relY } = getRelativePointerPosition(pe, this.pane);\n\n    const internalElem = document.createElement('div');\n    const elem = document.createElement('div');\n    elem.classList.add(classes.pointer);\n    elem.dataset.pointerId = `${pe.pointerId}`;\n    elem.appendChild(internalElem);\n\n    this.pane.append(elem);\n\n    this.tones.add(pe.pointerId, relX, relY);\n\n    this.updatePointer(pe);\n  }\n\n  updatePointer(pe: PointerEvent) {\n    if (pe.buttons === 0) return;\n\n    const id = pe.pointerId;\n    const elems = queryForPointerIdAll<HTMLElement>(this.pane, id);\n    const { x, y, relX, relY } = getRelativePointerPosition(pe, this.pane);\n    elems.forEach((e) => setPosition(e, x, y));\n    this.tones.update(id, relX, relY);\n  }\n\n  removePointer(pe: PointerEvent) {\n    const id = pe.pointerId;\n    const elems = queryForPointerIdAll<HTMLElement>(this.pane, id);\n    elems.forEach((e) => e.remove());\n    this.pane.releasePointerCapture(pe.pointerId);\n\n    this.tones.remove(id);\n\n    if (this.tones.size)\n      this.pane.removeEventListener('pointermove', this.handlers.updatePointer);\n  }\n}\n",null,"import {\n  hasKey,\n  interpolateLinear,\n  interpolateLogarithmic,\n  AudioContext,\n} from './util';\n\ninterface ToneData {\n  tGain: number;\n  tFrequency: number;\n}\n\ninterface ToneDataWithNodes extends ToneData {\n  envelopeGainNode: GainNode;\n  gainNode: GainNode;\n  oscillatorNode: OscillatorNode;\n}\n\nfunction extractToneData<T extends ToneData>(toneDataExt: T): ToneData {\n  const { tGain, tFrequency } = toneDataExt;\n  return {\n    tGain,\n    tFrequency,\n  };\n}\n\ntype ToneOptions = {\n  waveType: OscillatorType;\n  gainMin: number;\n  gainMax: number;\n  frequencyMinHz: number;\n  frequencyMaxHz: number;\n  attackMs: number;\n  releaseMs: number;\n  updateMs: number;\n};\n\nconst defaultToneOptions: Readonly<ToneOptions> = {\n  waveType: 'square',\n  gainMin: 0.01,\n  gainMax: 0.3,\n  frequencyMinHz: 65,\n  frequencyMaxHz: 3000,\n  attackMs: 10,\n  releaseMs: 200,\n  updateMs: 10,\n};\n\nclass Tones {\n  public readonly options: ToneOptions;\n\n  protected toneObjects: Map<number, ToneDataWithNodes>;\n\n  protected audioContext: AudioContext;\n\n  protected needsRefresh: boolean;\n\n  constructor(options: Partial<ToneOptions> = {}) {\n    const optionsWithDefaults = { ...defaultToneOptions, ...options };\n    this.options = new Proxy<ToneOptions>(optionsWithDefaults, {\n      set: (target: typeof optionsWithDefaults, key, newValue): boolean => {\n        // The TypeScript compiler already enforces the correct type on the Proxy level,\n        // so the following assignment is safe even if we can't determine the type of\n        // `newValue` statically.\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,no-param-reassign\n        target[key] = newValue;\n        if (hasKey(optionsWithDefaults, key)) {\n          // update tones\n          console.log('Update!!');\n          this.scheduleRefresh();\n        }\n        return true;\n      },\n    });\n\n    this.toneObjects = new Map();\n    this.audioContext = new AudioContext();\n    this.needsRefresh = false;\n  }\n\n  getToneData(): Map<number, ToneData> {\n    const convertEntries = ([id, t]: [id: number, t: ToneDataWithNodes]): [\n      number,\n      ToneData,\n    ] => [id, extractToneData(t)];\n    const entriesExt = [...this.toneObjects.entries()];\n    const entries = entriesExt.map(convertEntries);\n    return new Map(entries);\n  }\n\n  get size() {\n    return this.toneObjects.size;\n  }\n\n  createTone() {\n    // create envelope Gain node\n    const envelopeGainNode = this.audioContext.createGain();\n    envelopeGainNode.gain.value = 0;\n    envelopeGainNode.connect(this.audioContext.destination);\n\n    // create Gain node\n    const gainNode = this.audioContext.createGain();\n    gainNode.connect(envelopeGainNode);\n\n    // create variable-frequency Oscillator node\n    const { waveType } = this.options;\n    const oscillatorNode = this.audioContext.createOscillator();\n    oscillatorNode.type = waveType;\n    oscillatorNode.connect(gainNode);\n    oscillatorNode.start();\n\n    return {\n      envelopeGainNode,\n      gainNode,\n      oscillatorNode,\n    };\n  }\n\n  getToneParams(tGain: number, tFrequency: number) {\n    const { gainMin, gainMax } = this.options;\n    const gain = interpolateLinear(tGain, gainMin, gainMax);\n    const { frequencyMinHz, frequencyMaxHz } = this.options;\n    const frequency = interpolateLogarithmic(\n      tFrequency,\n      frequencyMinHz,\n      frequencyMaxHz,\n    );\n    return { gain, frequency };\n  }\n\n  add(id: number, tGain: number, tFrequency: number): ToneData {\n    const tone = this.createTone();\n    const { envelopeGainNode, gainNode, oscillatorNode } = tone;\n    const { gain, frequency } = this.getToneParams(tGain, tFrequency);\n    const { attackMs } = this.options;\n    const attackTimestamp = this.audioContext.currentTime + attackMs / 1000;\n    envelopeGainNode.gain.linearRampToValueAtTime(1.0, attackTimestamp);\n    gainNode.gain.value = gain;\n    oscillatorNode.frequency.value = frequency;\n\n    this.remove(id);\n\n    const toneData = { ...tone, tGain, tFrequency };\n    this.toneObjects.set(id, toneData);\n\n    return toneData;\n  }\n\n  update(id: number, tGain: number, tFrequency: number) {\n    this.audioContext.resume().catch(() => {});\n\n    const toneDataWithNodes = this.toneObjects.get(id);\n    if (!toneDataWithNodes) return;\n\n    toneDataWithNodes.tGain = tGain;\n    toneDataWithNodes.tFrequency = tFrequency;\n    this.refreshNodes(toneDataWithNodes);\n  }\n\n  protected refreshNodes(toneDataWithNodes: ToneDataWithNodes) {\n    const { tGain, tFrequency } = toneDataWithNodes;\n    const { gain, frequency } = this.getToneParams(tGain, tFrequency);\n    const { gainNode, oscillatorNode } = toneDataWithNodes;\n    const { updateMs } = this.options;\n    if (updateMs <= 0) {\n      gainNode.gain.value = gain;\n      oscillatorNode.frequency.value = frequency;\n    } else {\n      const updateDoneTimestamp =\n        this.audioContext.currentTime + updateMs / 1000.0;\n      gainNode.gain.linearRampToValueAtTime(gain, updateDoneTimestamp);\n      oscillatorNode.frequency.linearRampToValueAtTime(\n        frequency,\n        updateDoneTimestamp,\n      );\n    }\n  }\n\n  remove(id: number) {\n    const toneData = this.toneObjects.get(id);\n    if (!toneData) return;\n\n    const { envelopeGainNode, gainNode, oscillatorNode } = toneData;\n    const { releaseMs } = this.options;\n    const decayTimestamp = this.audioContext.currentTime + releaseMs / 1000;\n    envelopeGainNode.gain.linearRampToValueAtTime(0.0, decayTimestamp);\n    setTimeout(() => {\n      gainNode.disconnect();\n      oscillatorNode.stop();\n      oscillatorNode.disconnect();\n    }, releaseMs);\n\n    this.toneObjects.delete(id);\n  }\n\n  refresh() {\n    [...this.toneObjects.values()].forEach((t) => this.refreshNodes(t));\n  }\n\n  scheduleRefresh() {\n    this.needsRefresh = true;\n    this.needsRefresh = true;\n    queueMicrotask(() => this.refreshIfNeeded());\n  }\n\n  refreshIfNeeded(): boolean {\n    if (this.needsRefresh) {\n      this.refresh();\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport { ToneOptions, defaultToneOptions };\nexport default Tones;\n",null,"function hasKey<T extends object>(obj: T, k: keyof never): k is keyof T {\n  return k in obj;\n}\n\nfunction interpolateLinear(t: number, min: number, max: number) {\n  return min + (max - min) * t;\n}\n\nfunction interpolateLogarithmic(t: number, min: number, max: number) {\n  // The base of the logarithm cancels out during the computation,\n  // so we will just use any base, e.g. Euler's number.\n  const logMin = Math.log(min);\n  const logMax = Math.log(max);\n  const logValue = logMin + (logMax - logMin) * t;\n  return Math.exp(logValue);\n}\n\nfunction getRelativePointerPosition(pe: PointerEvent, elem: HTMLElement) {\n  const { left, top, width, height } = elem.getBoundingClientRect();\n  const x = Math.max(0, Math.min(pe.clientX - left, width));\n  const y = Math.max(0, Math.min(pe.clientY - top, height));\n  const relX = x / width;\n  const relY = y / height;\n  return { x, y, relX, relY, width, height };\n}\n\nfunction setPosition(element: HTMLElement, x: number, y: number) {\n  const { style } = element;\n  style.left = `${x}px`;\n  style.top = `${y}px`;\n}\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\n\nexport {\n  hasKey,\n  interpolateLinear,\n  interpolateLogarithmic,\n  getRelativePointerPosition,\n  setPosition,\n  AudioContext,\n};\n",null],"names":[],"version":3,"file":"index.mjs.map"}