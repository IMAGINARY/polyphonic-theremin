{"mappings":"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","sources":["src/lib/ts/index.ts","index.ts","src/lib/ts/polyphonic-theremin.ts","polyphonic-theremin.ts","src/lib/scss/polyphonic-theremin.module.scss","src/lib/ts/tones.ts","tones.ts","src/lib/ts/util.ts","util.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"declarations.d.ts\"/>\nimport PolyphonicTheremin from './polyphonic-theremin';\nimport type {\n  // Workaround because TypeScript currently can't re-export types via \"export * from '...'\"\n  PolyphonicThereminOptions as IPolyphonicThereminOptions,\n  ToneOptions as IToneOptions,\n} from './polyphonic-theremin';\n\nexport * from './polyphonic-theremin';\nexport default PolyphonicTheremin;\n\nexport type PolyphonicThereminOptions = IPolyphonicThereminOptions;\nexport type ToneOptions = IToneOptions;\n",null,"import classes from '../scss/polyphonic-theremin.module.scss';\nimport Tones, {\n  ToneOptions as IToneOptions,\n  defaultOptions as defaultToneOptions,\n} from './tones';\nimport { getRelativePointerPosition, setPosition } from './util';\n\nexport type ToneOptions = IToneOptions;\nexport type PolyphonicThereminOptions = {\n  touchElementCssClasses: string[];\n  touchElementStyle: string;\n};\n\nconst defaultOptions: Readonly<PolyphonicThereminOptions> = {\n  touchElementCssClasses: [classes.ring],\n  touchElementStyle: '',\n};\n\nfunction queryForPointerIdAll<T extends Element>(\n  parent: Element,\n  id: number,\n): NodeListOf<T> {\n  return parent.querySelectorAll<T>(\n    `.${classes.pointer}[data-pointer-id=\"${id}\"]`,\n  );\n}\n\nexport default class PolyphonicTheremin {\n  protected readonly _options: PolyphonicThereminOptions;\n\n  protected tones: Tones;\n\n  protected handlers = this.getHandlers();\n\n  protected element: Element;\n\n  protected pane: HTMLDivElement;\n\n  constructor(\n    element: Element,\n    options: Partial<PolyphonicThereminOptions> = {},\n    toneOptions: Partial<ToneOptions> = {},\n  ) {\n    this._options = { ...defaultOptions, ...options };\n\n    const pane = document.createElement('div');\n    pane.classList.add(classes.pane);\n    pane.addEventListener('pointerdown', this.handlers.addPointer);\n    pane.addEventListener('pointerup', this.handlers.removePointer);\n    pane.addEventListener('pointercancel', this.handlers.removePointer);\n    pane.addEventListener('contextmenu', (event) => event.preventDefault());\n\n    while (element.firstChild) element.firstChild.remove();\n    element.appendChild(pane);\n\n    this.pane = pane;\n    this.element = element;\n\n    this.tones = new Tones(toneOptions);\n  }\n\n  getOptions() {\n    return { ...this._options };\n  }\n\n  applyOptions(o: Partial<PolyphonicThereminOptions>) {\n    Object.assign(this._options, o);\n    this.refreshPointerElementCssAll();\n  }\n\n  getToneOptions(): ToneOptions {\n    return this.tones.getOptions();\n  }\n\n  applyToneOptions(o: Partial<ToneOptions>) {\n    this.tones.applyOptions(o);\n  }\n\n  protected getHandlers() {\n    return {\n      addPointer: this.addPointer.bind(this),\n      updatePointer: this.updatePointer.bind(this),\n      removePointer: this.removePointer.bind(this),\n    };\n  }\n\n  protected addPointer(pe: PointerEvent) {\n    this.removePointer(pe);\n    this.pane.addEventListener('pointermove', this.handlers.updatePointer);\n\n    this.pane.setPointerCapture(pe.pointerId);\n\n    const { relX, relY } = getRelativePointerPosition(pe, this.pane);\n\n    const internalElem = document.createElement('div');\n    this.refreshPointerElementCss(internalElem);\n\n    const elem = document.createElement('div');\n    elem.classList.add(classes.pointer);\n    elem.dataset.pointerId = `${pe.pointerId}`;\n    elem.appendChild(internalElem);\n\n    this.pane.append(elem);\n\n    this.tones.add(pe.pointerId, relX, relY);\n\n    this.updatePointer(pe);\n  }\n\n  protected updatePointer(pe: PointerEvent) {\n    if (pe.buttons === 0) return;\n\n    const id = pe.pointerId;\n    const elems = queryForPointerIdAll<HTMLElement>(this.pane, id);\n    const { x, y, relX, relY } = getRelativePointerPosition(pe, this.pane);\n    elems.forEach((e) => setPosition(e, x, y));\n    this.tones.update(id, relX, relY);\n  }\n\n  protected removePointer(pe: PointerEvent) {\n    const id = pe.pointerId;\n    const elems = queryForPointerIdAll<HTMLElement>(this.pane, id);\n    elems.forEach((e) => e.remove());\n    this.pane.releasePointerCapture(pe.pointerId);\n\n    this.tones.remove(id);\n\n    if (this.tones.size === 0)\n      this.pane.removeEventListener('pointermove', this.handlers.updatePointer);\n  }\n\n  protected refreshPointerElementCss(element: Element) {\n    const { touchElementCssClasses, touchElementStyle } = this._options;\n    element.classList.add(...touchElementCssClasses);\n    element.setAttribute('style', touchElementStyle);\n  }\n\n  protected refreshPointerElementCssAll() {\n    const elements = this.pane.querySelectorAll(`.${classes.pointer} > *`);\n    elements.forEach(this.refreshPointerElementCss.bind(this));\n  }\n}\n\nexport { defaultOptions, defaultToneOptions };\n",null,".pane {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: visible;\n  touch-action: none;\n  box-sizing: border-box;\n}\n\n.pane * {\n  touch-action: none;\n}\n\n.pointer {\n  position: absolute;\n}\n\n.pointer > .ring {\n  margin: 0;\n  position: absolute;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  border: 4px solid lightgray;\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n}\n","import {\n  interpolateLinear,\n  interpolateLogarithmic,\n  AudioContext,\n  cancelAndHoldNow,\n} from './util';\n\nexport interface ToneData {\n  tGain: number;\n  tFrequency: number;\n}\n\ninterface ToneDataWithNodes extends ToneData {\n  envelopeGainNode: GainNode;\n  gainNode: GainNode;\n  oscillatorNode: OscillatorNode;\n}\n\nfunction extractToneData<T extends ToneData>(toneDataExt: T): ToneData {\n  const { tGain, tFrequency } = toneDataExt;\n  return {\n    tGain,\n    tFrequency,\n  };\n}\n\ntype ToneOptions = {\n  waveType: OscillatorType;\n  gainMin: number;\n  gainMax: number;\n  frequencyMinHz: number;\n  frequencyMaxHz: number;\n  attackMs: number;\n  releaseMs: number;\n  updateMs: number;\n  mute: boolean;\n};\n\nconst defaultOptions: Readonly<ToneOptions> = {\n  waveType: 'square',\n  gainMin: 0.01,\n  gainMax: 0.3,\n  frequencyMinHz: 65,\n  frequencyMaxHz: 3000,\n  attackMs: 10,\n  releaseMs: 200,\n  updateMs: 10,\n  mute: false,\n};\n\nclass Tones {\n  protected readonly _options: ToneOptions;\n\n  protected toneObjects: Map<number, ToneDataWithNodes>;\n\n  protected releasingToneObjects: Set<ToneDataWithNodes>;\n\n  protected audioContext: AudioContext;\n\n  protected globalGain: GainNode;\n\n  constructor(options: Partial<ToneOptions> = {}) {\n    this._options = { ...defaultOptions, ...options };\n    this.toneObjects = new Map();\n    this.releasingToneObjects = new Set();\n    this.audioContext = new AudioContext();\n    this.globalGain = this.audioContext.createGain();\n    this.globalGain.gain.value = 0.0;\n    this.globalGain.connect(this.audioContext.destination);\n    this.applyMute();\n  }\n\n  getOptions(): ToneOptions {\n    return { ...this._options };\n  }\n\n  applyOptions(o: Partial<ToneOptions>) {\n    Object.assign(this._options, o);\n    // TODO: Optimize by updating only what actually changed.\n    this.applyMute();\n    this.refresh();\n  }\n\n  getToneData(): Map<number, ToneData> {\n    const convertEntries = ([id, t]: [id: number, t: ToneDataWithNodes]): [\n      number,\n      ToneData,\n    ] => [id, extractToneData(t)];\n    const entriesExt = [...this.toneObjects.entries()];\n    const entries = entriesExt.map(convertEntries);\n    return new Map(entries);\n  }\n\n  get size() {\n    return this.toneObjects.size;\n  }\n\n  createTone() {\n    // create envelope Gain node\n    const envelopeGainNode = this.audioContext.createGain();\n    envelopeGainNode.gain.value = 0;\n    envelopeGainNode.connect(this.globalGain);\n\n    // create Gain node\n    const gainNode = this.audioContext.createGain();\n    gainNode.connect(envelopeGainNode);\n\n    // create variable-frequency Oscillator node\n    const { waveType } = this._options;\n    const oscillatorNode = this.audioContext.createOscillator();\n    oscillatorNode.type = waveType;\n    oscillatorNode.connect(gainNode);\n    oscillatorNode.start();\n\n    return {\n      envelopeGainNode,\n      gainNode,\n      oscillatorNode,\n    };\n  }\n\n  getToneParams(tGain: number, tFrequency: number) {\n    const { gainMin, gainMax } = this._options;\n    const gain = interpolateLinear(tGain, gainMin, gainMax);\n    const { frequencyMinHz, frequencyMaxHz } = this._options;\n    const frequency = interpolateLogarithmic(\n      tFrequency,\n      frequencyMinHz,\n      frequencyMaxHz,\n    );\n    return { gain, frequency };\n  }\n\n  add(id: number, tGain: number, tFrequency: number): ToneData {\n    const tone = this.createTone();\n    const { envelopeGainNode, gainNode, oscillatorNode } = tone;\n    const { gain, frequency } = this.getToneParams(tGain, tFrequency);\n    const { attackMs } = this._options;\n    const attackTimestamp = this.audioContext.currentTime + attackMs / 1000;\n    envelopeGainNode.gain.linearRampToValueAtTime(1.0, attackTimestamp);\n    gainNode.gain.value = gain;\n    oscillatorNode.frequency.value = frequency;\n\n    this.remove(id);\n\n    const toneData = { ...tone, tGain, tFrequency };\n    this.toneObjects.set(id, toneData);\n\n    return toneData;\n  }\n\n  update(id: number, tGain: number, tFrequency: number) {\n    this.audioContext.resume().catch(() => {});\n\n    const toneDataWithNodes = this.toneObjects.get(id);\n    if (!toneDataWithNodes) return;\n\n    toneDataWithNodes.tGain = tGain;\n    toneDataWithNodes.tFrequency = tFrequency;\n    this.refreshNodes(toneDataWithNodes);\n  }\n\n  protected refreshNodes(toneDataWithNodes: ToneDataWithNodes) {\n    const { tGain, tFrequency } = toneDataWithNodes;\n    const { gain, frequency } = this.getToneParams(tGain, tFrequency);\n    const { gainNode, oscillatorNode } = toneDataWithNodes;\n    const { updateMs } = this._options;\n    const { currentTime } = this.audioContext;\n    const updateDoneTimestamp = currentTime + updateMs / 1000.0;\n    const gainParam = gainNode.gain;\n    const frequencyParam = oscillatorNode.frequency;\n    cancelAndHoldNow(gainParam, this.audioContext);\n    cancelAndHoldNow(frequencyParam, this.audioContext);\n    gainParam.linearRampToValueAtTime(gain, updateDoneTimestamp);\n\n    // Use exponential ramp if available and linear ramp otherwise.\n    const frequencyRamp =\n      frequencyParam.exponentialRampToValueAtTime.bind(frequencyParam) ??\n      frequencyParam.linearRampToValueAtTime.bind(frequencyParam);\n    frequencyRamp(frequency, updateDoneTimestamp);\n  }\n\n  remove(id: number) {\n    const toneData = this.toneObjects.get(id);\n    if (!toneData) return;\n\n    const { envelopeGainNode, gainNode, oscillatorNode } = toneData;\n    const { releaseMs } = this._options;\n    const decayTimestamp = this.audioContext.currentTime + releaseMs / 1000;\n    envelopeGainNode.gain.linearRampToValueAtTime(0.0, decayTimestamp);\n    setTimeout(() => {\n      envelopeGainNode.disconnect();\n      gainNode.disconnect();\n      oscillatorNode.stop();\n      oscillatorNode.disconnect();\n      this.releasingToneObjects.delete(toneData);\n\n      const tonesLeftPlaying =\n        this.toneObjects.size + this.releasingToneObjects.size;\n      if (tonesLeftPlaying === 0) this.audioContext.suspend().catch(() => {});\n    }, releaseMs);\n\n    this.toneObjects.delete(id);\n    this.releasingToneObjects.add(toneData);\n  }\n\n  refresh() {\n    [...this.toneObjects.values()].forEach((t) => this.refreshNodes(t));\n  }\n\n  protected applyMute() {\n    const { currentTime } = this.audioContext;\n    const { gain } = this.globalGain;\n    const updateDoneTimestamp = currentTime + 0.02;\n    const targetGain = this._options.mute ? 0.0 : 1.0;\n    cancelAndHoldNow(gain, this.audioContext);\n    gain.linearRampToValueAtTime(targetGain, updateDoneTimestamp);\n  }\n}\n\nexport { ToneOptions, defaultOptions };\nexport default Tones;\n",null,"function interpolateLinear(t: number, min: number, max: number) {\n  return min + (max - min) * t;\n}\n\nfunction interpolateLogarithmic(t: number, min: number, max: number) {\n  // The base of the logarithm cancels out during the computation,\n  // so we will just use any base, e.g. Euler's number.\n  const logMin = Math.log(min);\n  const logMax = Math.log(max);\n  const logValue = logMin + (logMax - logMin) * t;\n  return Math.exp(logValue);\n}\n\nfunction getRelativePointerPosition(pe: PointerEvent, elem: HTMLElement) {\n  const { left, top, width, height } = elem.getBoundingClientRect();\n  const x = Math.max(0, Math.min(pe.clientX - left, width));\n  const y = Math.max(0, Math.min(pe.clientY - top, height));\n  const relX = x / width;\n  const relY = y / height;\n  return { x, y, relX, relY, width, height };\n}\n\nfunction setPosition(element: HTMLElement, x: number, y: number) {\n  const { style } = element;\n  style.transform = `translate(${x}px, ${y}px)`;\n}\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\n\n/**\n * This is a workaround for some browsers not supporting\n * AudioParam.cancelAndHoldAtTime().\n */\nfunction cancelAndHoldNow(audioParam: AudioParam, audioContext: AudioContext) {\n  const { currentTime } = audioContext;\n  const { value } = audioParam;\n  audioParam.cancelScheduledValues(currentTime);\n  // eslint-disable-next-line no-param-reassign\n  audioParam.value = value;\n}\n\nexport {\n  interpolateLinear,\n  interpolateLogarithmic,\n  getRelativePointerPosition,\n  setPosition,\n  AudioContext,\n  cancelAndHoldNow,\n};\n",null],"names":[],"version":3,"file":"index.js.map"}